echo 'import os
from flask import Flask, request, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from werkzeug.utils import secure_filename
from ultralytics import YOLO
import cv2

app = Flask(__name__)

# PostgreSQL config (set DATABASE_URL in Replit secrets)
app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv(
    "DATABASE_URL", "postgresql+psycopg2://user:password@localhost:5432/mydb"
)
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

class Detection(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(255), nullable=False)
    label = db.Column(db.String(80), nullable=False)
    confidence = db.Column(db.Float, nullable=False)

with app.app_context():
    db.create_all()

model = YOLO("yolov8n.pt")

@app.route("/", methods=["GET"])
def home():
    return """
    <h2>YOLOv8 Object Detection</h2>
    <form method="post" action="/detect" enctype="multipart/form-data">
        <input type="file" name="file" accept="image/*">
        <input type="submit" value="Detect">
    </form>
    """

@app.route("/detect", methods=["POST"])
def detect():
    if "file" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["file"]
    filename = secure_filename(file.filename)
    os.makedirs("uploads", exist_ok=True)
    filepath = os.path.join("uploads", filename)
    file.save(filepath)

    results = model(filepath)
    pred_path = os.path.join("uploads", f"pred_{filename}")
    results[0].save(filename=pred_path)

    for box in results[0].boxes:
        cls_id = int(box.cls[0])
        label = model.names[cls_id]
        conf = float(box.conf[0])
        detection = Detection(filename=filename, label=label, confidence=conf)
        db.session.add(detection)
    db.session.commit()

    return send_file(pred_path, mimetype="image/jpeg")

@app.route("/detections", methods=["GET"])
def get_detections():
    data = [
        {"filename": d.filename, "label": d.label, "confidence": d.confidence}
        for d in Detection.query.all()
    ]
    return jsonify(data)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3000, debug=True)
' > main.py && pip install ultralytics flask flask_sqlalchemy opencv-python-headless pillow psycopg2-binary gunicorn && gunicorn -w 2 -b 0.0.0.0:3000 main:app
